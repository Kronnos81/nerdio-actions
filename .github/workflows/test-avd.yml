name: 'Test install scripts'

on:
  workflow_dispatch:
  push:
    paths:
      - 'scripts/image/*.ps1'
      - 'scripts/uninstall/*.ps1'
  schedule:
    - cron: '0 1 15 * *' #Run on the 15th of each month

jobs:
  pssa:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@6b2948b1944407914a58661c49941824d149734f
        with:
          path: "./"
          recurse: true
          output: results.sarif

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  test:
    name: Run tests
    needs: pssa
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run support scripts
        shell: powershell
        working-directory: "${{ github.workspace }}\\scripts\\image"
        run: |
          $Scripts = Get-ChildItem -Include "0*.ps1" -Recurse -Exclude "012_WindowsUpdate.ps1"
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run dependencies scripts
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\scripts\\image"
        run: |
          $Scripts = Get-ChildItem -Include "1*.ps1" -Recurse -Exclude "101_Avd-Agents.ps1"
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run Microsoft apps scripts
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\scripts\\image"
        run: |
          $Scripts = Get-ChildItem -Include "2*.ps1" -Recurse
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run 3rd party apps scripts
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\scripts\\image"
        run: |
          $Scripts = Get-ChildItem -Include "4*.ps1" -Recurse #-Exclude "401_FoxitPDReader.ps1"
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run clean up scripts
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\scripts\\image"
        run: |
          $Scripts = Get-ChildItem -Include "9*.ps1" -Recurse
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: List installed apps
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\support"
        run: |
          . .\Get-Installed.ps1
          $params = @{
              Path              = "$env:GITHUB_WORKSPACE\support\InstalledApplications.csv"
              Encoding          = "Utf8"
              NoTypeInformation = $true
              Verbose           = $true
          }
          Get-InstalledSoftware | Export-Csv @params

      - name: Upload installed apps list
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: installed-applications
          path: "${{ github.workspace }}\\support\\InstalledApplications.csv"

      - name: Test with Pester
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}"
        run: |
          .\tests\Install-Pester.ps1
          Import-Module -Name "Pester", "Evergreen", "VcRedist" -Force -ErrorAction "Stop"
          $Config = [PesterConfiguration]::Default
          $Config.Run.Path = ".\tests"
          $Config.Run.PassThru = $true
          $Config.CodeCoverage.Enabled = $false
          $Config.Output.Verbosity = "Detailed"
          $Config.TestResult.Enabled = $true
          $Config.TestResult.OutputFormat = "NUnitXml"
          $Config.TestResult.OutputPath = ".\tests\TestResults.xml"
          Invoke-Pester -Configuration $Config

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: "${{ github.workspace }}\\tests\\TestResults.xml"

      # Publish test results
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          nunit_files: "${{ github.workspace }}\\tests\\TestResults.xml"

      - name: Run uninstall scripts
        shell: powershell
        if: always()
        working-directory: "${{ github.workspace }}\\scripts\\uninstall"
        run: |
          $Scripts = Get-ChildItem -Include "Uninstall*.ps1" -Recurse
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }
