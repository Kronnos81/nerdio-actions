name: 'Test AVD image scripts'

on:
  workflow_dispatch:
  push:
    paths:
      - 'avd/*.ps1'
  schedule:
    - cron: '0 1 15 * *' #Run on the 15th of each month

# permissions:
#   checks: write
#   pull-requests: write

jobs:
  build:
    # permissions:
    #   contents: read # for actions/checkout to fetch code

    name: Test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run first script batch
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Write-Host "Run: 00_Rds-PrepImage.ps1"
          .\00_Rds-PrepImage.ps1

          Write-Host "Run: 01_SupportFunctions.ps1"
          .\01_SupportFunctions.ps1

          #Write-Host "Run: 02_WindowsUpdate.ps1"
          #.\02_WindowsUpdate.ps1

          #Write-Host "Run: 03_RegionLanguage.ps1"
          #.\03_RegionLanguage.ps1

          Write-Host "04_RolesFeatures.ps1"
          .\04_RolesFeatures.ps1

          Write-Host "Run: 05_Customise.ps1"
          .\05_Customise.ps1

      - name: Run second script batch
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Write-Host "Run: 06_MicrosoftVcRedists.ps1"
          .\06_MicrosoftVcRedists.ps1

          Write-Host "Run: 07_MicrosoftNET.ps1"
          .\07_MicrosoftNET.ps1

          Write-Host "Run: 08_MicrosoftFSLogixApps.ps1"
          .\08_MicrosoftFSLogixApps.ps1

          Write-Host "Run: 09_MicrosoftEdge.ps1"
          .\09_MicrosoftEdge.ps1

          Write-Host "Run: 10_Microsoft365Apps.ps1"
          .\10_Microsoft365Apps.ps1

          Write-Host "Run: 11_MicrosoftOneDrive.ps1"
          .\11_MicrosoftOneDrive.ps1

          Write-Host "Run: 12_MicrosoftTeams.ps1"
          .\12_MicrosoftTeams.ps1

          #Write-Host "Run: 13_Avd-Agents.ps1"
          #.\13_Avd-Agents.ps1

          Write-Host "Run: 39_AdobeAcrobatReaderDC.ps1"
          .\39_AdobeAcrobatReaderDC.ps1

      - name: Run third script batch
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Write-Host "Run: 99_FinaliseImage.ps1"
          .\99_FinaliseImage.ps1

      - name: List installed apps
        shell: powershell
        working-directory: "${{ github.workspace }}\\support"
        run: |
          .\Get-Installed.ps1

      - name: Test with Pester
        shell: powershell
        working-directory: "${{ github.workspace }}"
        run: |
          .\tests\Install-Pester.ps1
          Import-Module -Name "Pester" -Force
          $Config = [PesterConfiguration]::Default
          $Config.Run.Path = ".\tests"
          $Config.Run.PassThru = $true
          $Config.CodeCoverage.Enabled = $false
          $Config.TestResult.Enabled = $true
          $Config.TestResult.OutputFormat = "NUnitXml"
          $Config.TestResult.OutputPath = ".\tests\TestResults.xml"
          Invoke-Pester -Configuration $Config

      # Upload test results
      - uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: "${{ github.workspace }}\\tests\\TestResults.xml"

      # Publish test results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          nunit_files: "${{ github.workspace }}\\tests\\TestResults.xml"
