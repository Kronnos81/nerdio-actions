name: 'Test AVD image scripts'

on:
  workflow_dispatch:
  push:
    paths:
      - 'avd/*.ps1'
  schedule:
    - cron: '0 1 15 * *' #Run on the 15th of each month

jobs:
  test:
    name: Tests
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run support scripts
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Write-Host "Run: 00_Rds-PrepImage.ps1"
          .\000_Rds-PrepImage.ps1

          Write-Host "Run: 01_SupportFunctions.ps1"
          .\011_SupportFunctions.ps1

          #Write-Host "Run: 02_WindowsUpdate.ps1"
          #.\012_WindowsUpdate.ps1

          #Write-Host "Run: 03_RegionLanguage.ps1"
          .\013_RegionLanguage.ps1

          Write-Host "04_RolesFeatures.ps1"
          .\014_RolesFeatures.ps1

          Write-Host "Run: 05_Customise.ps1"
          .\015_Customise.ps1

      - name: Run dependencies scripts
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Get-ChildItem -Include "1*.ps1" -Recurse -Exclude "101_Avd-Agents.ps1"
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run Microsoft apps scripts
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Get-ChildItem -Include "2*.ps1" -Recurse
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run 3rd party apps scripts
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Get-ChildItem -Include "4*.ps1" -Recurse
          foreach ($Script in $Scripts) {
              Write-Host "Run: $($Script.Name)"
              & $Script.FullName
          }

      - name: Run clean up script
        shell: powershell
        working-directory: "${{ github.workspace }}\\avd"
        run: |
          Write-Host "Run: 99_CleanupImage.ps1"
          .\99_CleanupImage.ps1

      - name: List installed apps
        shell: powershell
        working-directory: "${{ github.workspace }}\\support"
        run: |
          .\Get-Installed.ps1

      - name: Test with Pester
        shell: powershell
        working-directory: "${{ github.workspace }}"
        run: |
          .\tests\Install-Pester.ps1
          Import-Module -Name "Pester" -Force
          $Config = [PesterConfiguration]::Default
          $Config.Run.Path = ".\tests"
          $Config.Run.PassThru = $true
          $Config.CodeCoverage.Enabled = $false
          $Config.Output.Verbosity = "Detailed"
          $Config.TestResult.Enabled = $true
          $Config.TestResult.OutputFormat = "NUnitXml"
          $Config.TestResult.OutputPath = ".\tests\TestResults.xml"
          Invoke-Pester -Configuration $Config

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: "${{ github.workspace }}\\tests\\TestResults.xml"

      # Publish test results
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          nunit_files: "${{ github.workspace }}\\tests\\TestResults.xml"
